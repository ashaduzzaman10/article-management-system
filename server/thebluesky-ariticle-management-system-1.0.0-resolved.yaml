---
openapi: 3.0.0
info:
  title: ariticle-management-system
  description: A simple article management system for people who wants to manage their article smartly
  contact:
    name: Ashaduzzaman akash
    url: https://debuggingdiares.blogspot.com/
    email: devakashtbo10@gmail.com
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/thebluesky/ariticle-management-system/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:4000/api/v1
  description: dev
tags:
- name: Auth
  description: Authentication Endpoints (public)
- name: Article
  description: Article Endpoints (public + private)
- name: Comment
  description: Comment Endpoints (private)
- name: User
  description: User Endpoints (admin only)
paths:
  /auth/signup:
    post:
      tags:
      - Auth
      description: createw a new account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_signup_body'
      responses:
        "201":
          description: Singup successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
  /auth/signin:
    post:
      tags:
      - Auth
      description: Login to your account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_signin_body'
      responses:
        "200":
          description: Singin successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
  /articles:
    get:
      tags:
      - Article
      description: Retrive all published articles
      parameters:
      - name: page
        in: query
        description: Current page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 2
      - name: limit
        in: query
        description: Maximum items to be returned
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 10
      - name: sort_type
        in: query
        description: Type of sort (asc or dsc)
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: dsc
          enum:
          - asc
          - dsc
      - name: search
        in: query
        description: Search term
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: title
      responses:
        "200":
          description: Return a list of aritcles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
    post:
      tags:
      - Article
      description: Create a new article
      operationId: createPost
      requestBody:
        description: To create a new article user must need to provide valid data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles_body'
      responses:
        "201":
          description: Successfully created a new article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleCreateDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
  /aritcles/{id}:
    get:
      tags:
      - Article
      description: Fetch a single article
      parameters:
      - name: id
        in: path
        description: Article ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      - name: expand
        in: query
        description: Expand author and comment object
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "author, comment"
      responses:
        "200":
          description: Single article view
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
    put:
      tags:
      - Article
      description: create or update entire article
      parameters:
      - name: id
        in: path
        description: Article ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/aritcles_id_body'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleUpdateDTO'
        "201":
          description: Successfully creaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleCreateDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
    delete:
      tags:
      - Article
      description: Delete an article by id
      parameters:
      - name: id
        in: path
        description: Article ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        "204":
          description: Article deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
    patch:
      tags:
      - Article
      description: Partially update an article
      parameters:
      - name: id
        in: path
        description: Article ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/aritcles_id_body_1'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleUpdateDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
components:
  schemas:
    Article:
      allOf:
      - required:
        - authorId
        - body
        - id
        - status
        - title
        type: object
        properties:
          id:
            type: integer
            format: int32
            example: 1
          authorId:
            type: integer
            format: int32
            example: 1
          title:
            type: string
            example: First article
          body:
            type: string
            format: text
            example: The body of the first article
          cover:
            type: string
            format: url
            example: https://s3.aws.example.com/23nds
          status:
            type: string
            example: draft
            enum:
            - draft
            - published
      - $ref: '#/components/schemas/Timestamp'
    ArticleCreateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: Article created successfully
        data:
          $ref: '#/components/schemas/Article'
        links:
          $ref: '#/components/schemas/ArticleCreateDTO_links'
    ArticleUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Article updated successfully
        data:
          $ref: '#/components/schemas/Article'
        links:
          $ref: '#/components/schemas/ArticleUpdateDTO_links'
    Comment:
      allOf:
      - required:
        - articleId
        - authorId
        - body
        - id
        - status
        type: object
        properties:
          id:
            type: integer
            format: int32
            example: 1
          authorId:
            type: integer
            format: int32
            example: 1
          articleId:
            type: integer
            format: int32
            example: 1
          body:
            type: string
            format: text
            example: The body of the comment
          status:
            type: string
            example: public
            enum:
            - public
            - private
      - $ref: '#/components/schemas/Timestamp'
    Timestamp:
      required:
      - createdAt
      - updatedAt
      type: object
      properties:
        createdAt:
          type: string
          format: datetime
        updatedAt:
          type: string
          format: datetime
    AuthorDTO:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: A.B Raihan
    Pagination:
      required:
      - limit
      - page
      - totalItems
      - totalPage
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
    auth_signup_body:
      required:
      - email
      - name
      - password
      type: object
      properties:
        name:
          type: string
          example: Ashaduzzaman akash
        email:
          type: string
          format: email
          example: akash@example.com
        password:
          type: string
          format: password
          example: password1234
    inline_response_201:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: Singup successful
        data:
          $ref: '#/components/schemas/inline_response_201_data'
        links:
          $ref: '#/components/schemas/inline_response_201_links'
    inline_response_400:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        error:
          type: string
          example: Bad request
        data:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_400_data'
    inline_response_500:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 500
        error:
          type: string
          example: Internal server error
        message:
          type: string
          example: We are sorry for the inconvenience. Please try again later.
    auth_signin_body:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
          example: akash@example.com
        password:
          type: string
          format: password
          example: password1234
    inline_response_200:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Sigin successful
        data:
          $ref: '#/components/schemas/inline_response_201_data'
        links:
          $ref: '#/components/schemas/inline_response_200_links'
    inline_response_200_1:
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
            - required:
              - author
              - id
              - title
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  example: 1
                title:
                  type: string
                  example: First article
                cover:
                  type: string
                  format: url
                  example: https://s3.aws.com/myfirstblog/123.jpg
                author:
                  $ref: '#/components/schemas/AuthorDTO'
                link:
                  type: string
                  format: url
                  example: /articles/1
            - $ref: '#/components/schemas/Timestamp'
        pagination:
          $ref: '#/components/schemas/Pagination'
        links:
          $ref: '#/components/schemas/inline_response_200_1_links'
    articles_body:
      required:
      - body
      - title
      type: object
      properties:
        title:
          type: string
          example: First article
        body:
          type: string
          format: text
          example: Body of the first article
        cover:
          type: string
          format: url
          example: https://s3.aws.example.com/23nds
        status:
          type: string
          example: draft
          enum:
          - draft
          - published
    inline_response_401:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 401
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You don't have the right permission.
    inline_response_200_2:
      type: object
      properties:
        data:
          allOf:
          - $ref: '#/components/schemas/Article'
          - type: object
            properties:
              author:
                $ref: '#/components/schemas/AuthorDTO'
          - type: object
            properties:
              comments:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        links:
          $ref: '#/components/schemas/inline_response_200_2_links'
    inline_response_404:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        error:
          type: string
          example: Not Found
        message:
          type: string
          example: Requested resource not found
    aritcles_id_body:
      required:
      - body
      - title
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: Article title
        body:
          type: string
          format: text
          example: article body
        cover:
          type: string
          format: url
          example: https://s3.aws.myblog.com/2mdf
        status:
          type: string
          example: draft
          enum:
          - draft
          - published
    aritcles_id_body_1:
      type: object
      properties:
        title:
          type: string
          example: Article title
        body:
          type: string
          format: text
          example: article body
        cover:
          type: string
          format: url
          example: https://s3.aws.myblog.com/2mdf
        status:
          type: string
          example: draft
          enum:
          - draft
          - published
    ArticleCreateDTO_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /articles/1
        author:
          type: string
          format: url
          example: /articles/1/author
        comments:
          type: string
          format: url
          example: articles/1/comments
    ArticleUpdateDTO_links:
      type: object
      properties:
        self:
          type: string
          example: /articles/1
    inline_response_201_data:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    inline_response_201_links:
      type: object
      properties:
        self:
          type: string
          example: /auth/signup
        singin:
          type: string
          example: /auth/signin
    inline_response_400_data:
      type: object
      properties:
        field:
          type: string
          example: email
        message:
          type: string
          example: Invalid email
        in:
          type: string
          example: body
          enum:
          - query
          - body
    inline_response_200_links:
      type: object
      properties:
        self:
          type: string
          example: /auth/signin
    inline_response_200_1_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /articles?page=2&limit=10
        next:
          type: string
          format: url
          example: /articles?page=2&limit=10
        prev:
          type: string
          format: url
          example: /articles?page=2&limit=10
    inline_response_200_2_links:
      type: object
      properties:
        self:
          type: string
          example: /articles/1
        author:
          type: string
          example: /articles/1/author
        comments:
          type: string
          example: /articles/1/comments
  responses:
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_500'
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_400'
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_401'
    "404":
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404'
  parameters:
    pageParam:
      name: page
      in: query
      description: Current page number
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      name: limit
      in: query
      description: Maximum items to be returned
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      name: sort_type
      in: query
      description: Type of sort (asc or dsc)
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: dsc
        enum:
        - asc
        - dsc
    sortByParam:
      name: sort_by
      in: query
      description: Sort key
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: updatedAt
    searchParam:
      name: search
      in: query
      description: Search term
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: title
    idPathParam:
      name: id
      in: path
      description: Article ID
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        format: int32
        example: 1
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
